<!--  -->
<template>
    <scroll-view class="scrollView" scroll-y bindscrolltoupper="getMoreData" lower-threshold="200" style="height:{{scrollHeight}}px" scroll-into-view="{{toview}}">
        <view class="chatBox-content-demo" wx:for="{{msgList}}" id="chat{{index}}" wx:key="index">
            <view class="clearfloat" wx:if="{{!item.isSend}}">
                <view class="author-name" wx:if="{{item.showtime}}">
                    <text class="chat-date">{{item.sendTime}}</text>
                </view>
                <view class="left" style="margin-bottom:40rpx;" wx:if="{{Complete && index == 0 && nick!='颜狗客服'}}">
                    <view class="chat-avatars">
                        <image src="{{item.avatar}}" class="avatar" mode="aspectFill" bindtap="goProfile"></image>
                    </view>
                    <view class="profile-image " wx:if="{{index==0}}" bindtap="goProfile">
                        <image class="thumb" src="{{item.avatar}}" mode="aspectFill"></image>
                        <view class="profile-desc {{item.be || 'friend'}}">
                            <view class="left-container">
                                <view class="top">{{item.nick_name}} {{item.age}}岁/{{item.constellation}}</view>
                                <view class="bottom">在全国颜值排名前{{item.face}}%</view>
                            </view>
                            <view class="right-container">
                                <image class="like-icon" src="https://images.facedog.cn/public/profile/{{item.be || 'friend'}}.png?v2" mode="aspectFill"></image>
                            </view>
                        </view>
                    </view>
                </view>
                <view class="left" wx:if="{{index != 0}}">
                    <view class="chat-avatars">
                        <image src="{{item.icon}}" class="avatar" mode="aspectFill" bindtap="goProfile"></image>
                    </view>
                    <view class="chat-message">
                        <!-- <image src="https://images.facedog.cn/public/profile/model.jpg" mode="aspectFill"></image> -->
                         <text selectable="true">{{item.msg}}</text>
                    </view>
                </view>
            </view>
            <view class="clearfloat" wx:if="{{item.isSend}}">
                <view class="author-name" wx:if="{{item.showtime}}">
                    <text class="chat-date">{{item.sendTime}}</text>
                </view>
                <view class="right">
                    <view class="chat-message">
                        <!-- <image src="{{item.item}}" wx:if="{{item.typ =='images'}}"></image> -->
                        <text selectable="true">{{item.msg}}</text>
                    </view>
                    <view class="chat-avatars">
                        <image class="avatar" src="{{item.icon}}" mode="aspectFill" @tap="goProfile('self')"></image>
                    </view>
                </view>
            </view>
        </view>
        <!-- </view> -->
    </scroll-view>
    <view class="chatInput" style="height:82rpx">
        <input type="text" adjust-position="true" confirm-hold="true" confirm-type="send" placeholder="请输入消息~" bindconfirm="bindConfirm" value="{{msgContent}}" class="input_text"></input>
    </view>

</template>

<script>
import wepy from 'wepy';
import webim from '@/utils/webim.js'; // 腾讯云im包
import webimhandler from '@/utils/handler';
import { formatDateFromSeconds, toast, getAge } from '@/utils';
import { Event } from '@/utils/event.js';
import { PROFILE } from '@/utils/url';
import { get } from '@/utils/request';

var loading = false;
export default class Chat extends wepy.page {
    config = {
        navigationBarTitleText: ''
    };
    data = {
        id: '',
        msgList: [],
        msgContent: '',
        LastMsgTime: 0, // 最近的消息时间，即从这个时间点向前拉取历史消息
        MsgKey: '',
        icon: '',
        toview: '',
        profile: {},
        scrollHeight: 0,
        msg: '',
        Complete: false,
        nick: '',
        count: 0,
        user: {}
    };

    components = {};

    methods = {
        getMoreData() {
            if (loading || this.Complete) return;
            loading = true;
            // wx.showLoading();
            this.getLastC2CHistoryMsgs(
                (list, err) => {
                    loading = false;
                    wx.hideLoading();
                    this.msgList.unshift(...list);
                    this.$apply();
                },
                err => {
                    loading = false;
                    wx.hideLoading();
                    console.log(err);
                }
            );
        },
        goProfile(self) {
            if (self != 'self') {
                wx.navigateTo({
                    url: `../battle/profile?dentifier=${this.id}`
                });
            } else {
                wx.navigateTo({
                    url: `../battle/profile?dentifier=${this.profile.dentifier}`
                });
            }
        },
        bindConfirm(e) {
            var that = this;
            var content = e.detail.value;
            if (!content.replace(/^\s*|\s*$/g, '')) return;
            that.msgList.push({
                msg: content,
                icon: that.profile.icon,
                isSend: true,
                sendTime: formatDateFromSeconds(
                    parseInt(new Date().getTime() / 1000)
                ),
                showtime:
                    that.msgList.length > 0
                        ? parseInt(new Date().getTime() / 1000) -
                              that.msgList[that.msgList.length - 1].time /
                                  1000 >
                          60
                        : parseInt(new Date().getTime() / 1000)
            });
            that.setData({
                msgContent: ''
            });
            that.toview = `chat${that.msgList.length - 1}`;
            webimhandler.onSendMsg(encodeURIComponent(content), function(e) {
                // if (e) {
                //     toast('发送失败');
                //     that.msgList.pop();
                //     return;
                // }

                var skey = that.id; // 拼装 skey
                var sessMap = webim.MsgStore.sessMap(); // 获取 sessMap
                var selSess = sessMap[skey]; // 获取 Session 的实例
                webim.setAutoRead(selSess, true, true);
                Event.trigger('send');
                that.$apply();
            });
        }
    };

    events = {};

    watch = {};

    computed = {};
    initChat() {
        // console.error(this.id);
        webimhandler.init({
            selToID: this.id,
            selType: webim.SESSION_TYPE.C2C,
            selSessHeadUrl: this.icon
        });
        if (webim.checkLogin()) {
            // 检查是否登录返回true和false,不登录则重新登录
            console.log('已登录');
            this.getLastC2CHistoryMsgs((list, err) => {
                this.msgList = list;
                this.toview = `chat${list.length - 1}`;
                this.$apply();
            });
        }
    }
    getLastC2CHistoryMsgs(cbOk, cbError) {
        var that = this;
        var options = {
            Peer_Account: this.id, // 好友帐号，selToID 为全局变量，表示当前正在进行的聊天 ID，当聊天类型为私聊时，该值为好友帐号，否则为群号。
            MaxCnt: 15, // 拉取消息条数
            LastMsgTime: this.LastMsgTime, // 最近的消息时间，即从这个时间点向前拉取历史消息
            MsgKey: this.MsgKey
        };
        webim.getC2CHistoryMsgs(
            options,
            function(resp) {
                var complete = resp.Complete; // 是否还有历史消息可以拉取，1-表示没有，0-表示有
                that.LastMsgTime = resp.LastMsgTime;
                that.MsgKey = resp.MsgKey;
                that.count = resp.MaxCnt;
                that.$apply();
                var temp = null;
                if (complete === 1 && that.nick != '颜狗客服') {
                    wx.hideLoading();
                    webim.Log.error(
                        '没有历史消息了:data=' + JSON.stringify(options)
                    );
                    temp = {
                        msg: '',
                        avatar: that.user.avatar,
                        nick_name: that.user.nick_name,
                        constellation: that.user.constellation,
                        age: getAge(that.user.birthday),
                        face: Math.floor(that.user.face * 100),
                        isSend: false,
                        be: that.user.be,
                        sendTime: formatDateFromSeconds(
                            parseInt(new Date().getTime() / 1000)
                        ),
                        showtime: parseInt(new Date().getTime() / 1000)
                    };
                    that.Complete = true;
                    that.$apply();
                }
                const list = resp.MsgList.map((item, index) => {
                    return {
                        fromAccount: item.fromAccount,
                        fromNickName: item.fromAccountNick,
                        msg: decodeURIComponent(item.elems[0].content.text),
                        icon: item.isSend ? that.profile.icon : that.icon,
                        isSend: item.isSend,
                        sendTime: formatDateFromSeconds(item.time),
                        count: resp.MaxCnt,
                        showtime:
                            index > 0 &&
                            item.time - resp.MsgList[index - 1].time > 60,
                        time: item.time
                    };
                });
                if (temp) {
                    if (list.length === 0) {
                        list.push(temp);
                    } else {
                        list.unshift(temp);
                    }
                }
                if (cbOk) cbOk(list);
            },
            cbError
        );
    }
    messageAppend(item) {
        this.msgList.push({
            fromAccount: item.fromAccount,
            fromNickName: item.fromAccountNick,
            msg: decodeURIComponent(item.elems[0].content.text),
            icon: this.icon,
            isSend: false,
            sendTime: formatDateFromSeconds(item.time)
        });
        this.toview = `chat${this.msgList.length - 1}`;
        this.$apply();
    }
    async onLoad(options) {
        this.id = options.id;
        wx.setNavigationBarTitle({
            title: options.nick
        });
        this.nick = options.nick;
        this.icon = wx.getStorageSync('chatIcon');
        this.scrollHeight = wx.getSystemInfoSync().windowHeight - 57;
        this.profile = wx.getStorageSync('profile');

        if (this.nick == '颜狗客服') {
            this.icon = 'https://images.facedog.cn/public/chat/chatIcon.png';
        } else {
            const result = await get(PROFILE, { dentifier: this.id });
            this.user = result;
            this.user.images.forEach(item => {
                if (item.is_avatar) {
                    this.user.avatar = item.image;
                }
            });
        }
        this.msgReaded();
        this.initChat();
        this.$apply();
    }
    msgDetect(msg) {
        console.warn('msgDetect', msg);
        if (msg.fromAccount == this.id) {
            this.messageAppend(msg);
            this.msgReaded();
        }
    }
    msgReaded() {
        var opts = {
            To_Account: this.id, // 好友帐号
            LastedMsgTime: parseInt(new Date().getTime() / 1000)
        };
        webim.c2CMsgReaded(opts);
        var skey = 'C2C' + this.id; // 拼装 skey
        var sessMap = webim.MsgStore.sessMap(); // 获取 sessMap
        var selSess = sessMap[skey]; // 获取 Session 的实例
        webim.setAutoRead(selSess, true, false);
    }
    onShow() {
        if (this.msgList.length) {
            this.toview = `chat${this.msgList.length - 1}`;
        }
        Event.listen('msgDetectChat', this.msgDetect.bind(this));
    }
    onUnload() {
        var sessMap = webim.MsgStore.sessMap(); // 获取 sessMap
        var skey = 'C2C' + this.id; // 拼装 skey
        var selSess = sessMap[skey]; // 获取 Session 的实例
        webim.setAutoRead(selSess, false, false);
        Event.remove('msgDetectChat');
        Event.trigger('send');
        loading = false;
        this.MsgKey = '';
        this.toview = '';
        this.LastMsgTime = 0;
        this.msgList = {};
        this.msgContent = '';
        this.profile = {};
        this.Complete = false;
        this.$apply();
    }
}
</script>

<style lang='less'>
page {
    background: #f6f6f6;
}
/**index.wxss**/
.allChatContent {
    width: 100%;
    position: relative;
    top: 0;
    /* overflow: scroll; */
}

.chatBox-content-demo {
    width: 100%;
    overflow-y: scroll;
}

.clearfloat:after {
    display: block;
    clear: both;
    content: '';
    visibility: hidden;
    height: 0;
}

.clearfloat {
    margin: 41rpx 29rpx 0;
    .avatar {
        width: 82rpx;
        height: 82rpx;
        border-radius: 50%;
    }
}
.clearfloat .right {
    float: right;
}

.author-name {
    font-size: 22rpx;
    text-align: center;
    margin: 35rpx auto;
    color: #a5a5a5;
}

.clearfloat .chat-message {
    text-align: left;
    max-width: 440rpx;
    padding: 22rpx 23rpx;
    border-radius: 20rpx;
    word-wrap: break-word;
    position: relative;
    display: inline-flex;
    color: #191919;
}

.profile-image {
    width: 370rpx;
    height: 428rpx;
    position: relative;
    margin-left: 22rpx;
    display: inline-block;
    .thumb {
        width: 100%;
        height: 100%;
        display: block;
        border-radius: 12rpx 12rpx 0 0;
        border: 0;
    }
    .profile-desc {
        width: 370rpx;
        height: 79rpx;
        &.lover{
            background:#EE5361;
        }
        &.friend{
            background:#dc4f56;
        }
        &.close{
            background:#D066EF;
        }
        border-radius: 0 0 12rpx 12rpx;
        color: #070707;
        display: flex;
        position: relative;
        justify-content: space-between;
        top: -30rpx;
        .left-container {
            margin-top: 10rpx;
            margin-right: auto;
            margin-left: 20rpx;
            .top {
                font-size: 22rpx;
                font-weight:600;
                margin-bottom:5rpx;
            }
            .bottom {
                font-size: 18rpx;
            }
        }
        .right-container {
            width: 60rpx;
            margin-right: 20rpx;
            .like-icon {
                width: 100%;
                height: 100%;
            }
        }
    }
}

.clearfloat .left .chat-message {
    background: white;
    font-size: 24rpx;
    margin-left: 22rpx;
}

.clearfloat .left .chat-message:before {
    position: absolute;
    content: '';
    top: 8px;
    left: -6px;
    border-top: 10px solid transparent;
    border-bottom: 10px solid transparent;
    border-right: 10px solid white;
}

.clearfloat .right {
    text-align: right;
}

.clearfloat .right .chat-message {
    background: #1ccddf;
    text-align: left;
    font-size: 24rpx;
    font-weight: 600;
    margin-right: 22rpx;
}

.clearfloat .right .chat-message:before {
    position: absolute;
    content: '';
    top: 23rpx;
    right: -6px;
    border-top: 20rpx solid transparent;
    border-bottom: 20rpx solid transparent;
    border-left: 20rpx solid #1ccddf;
}

.clearfloat .chat-avatars {
    display: inline-block;
    vertical-align: top;
}

.chatInput {
    width: 690rpx;
    height: 82rpx;
    display: flex;
    bottom: 23rpx;
    position: fixed;
    padding: 26rpx 32rpx 0;
    align-items: center;
    justify-content: center;
    .input_text {
        background: rgba(255, 255, 255, 1);
        border-radius: 41rpx;
        font-size: 28rpx;
        height: 82rpx;
        font-weight: 500;
        padding: 0 32rpx;
        width: 100%;
        color: rgba(158, 157, 157, 1);
    }
}

.noMoreChat {
    text-align: center;
    font-size: 14px;
    height: 40px;
    line-height: 40px;
    color: #888;
}
</style>
