<template>
    <view wx:if="{{selectedTab === 0}}">
        <battle />
    </view>
    <view wx:if="{{selectedTab === 1}}">
        <discover />
    </view>
    <view wx:if="{{selectedTab === 2}}">
        <chat />
    </view>
    <view wx:if="{{selectedTab === 3}}">
        <my />
    </view>
    <block wx:if="{{tabbarshow}}">
        <tabbar :tabIndex.sync="selectedTab" />
    </block>
</template>

<script>
import wepy from 'wepy';
import tabbar from '@/components/tabbar';
import battle from '@/components/battle/battle';
import discover from '@/components/discover/discover';
import my from '@/components/my/my';
import chat from '@/components/chat/chat';
import { sleep } from '@/utils';
import testMixin from '@/mixins/test';
import { get } from '@/utils/request';
import { PROFILE } from '@/utils/url';
import { getAge } from '@/utils';
import { Event } from '@/utils/event.js';
// import { toast } from '@/utils';
export default class Index extends wepy.page {
    config = {
        navigationBarTitleText: '颜狗',
        disableScroll: true,
        usingComponents: {
            'van-button': '../components/vant/button/index',
            'van-tabbar': '../components/vant/tabbar/index',
            'van-tabbar-item': '../components/vant/tabbar-item/index',
            'van-dialog': '../components/vant/dialog/index',
            'van-icon': '../components/vant/icon/index',
            'van-tabs': '../components/vant/tabs/index',
            'van-tab': '../components/vant/tab/index',
            'van-popup': '../components/vant/popup/index',
            'van-overlay': '../components/vant/overlay/index',
            'van-swipe-cell': '../components/vant/swipe-cell/index'
        }
    };
    components = {
        tabbar,
        battle,
        discover,
        chat,
        my
    };

    data = {
        mynum: 20,
        userInfo: {
            nickName: '加载中...'
        },
        selectedTab: 0,
        tabbarshow: true
    };
    computed = {
        now() {
            return +new Date();
        }
    };
    methods = {
        onGotUserInfo(e) {
            console.log(e.detail.errMsg);
            console.log(e.detail.userInfo);
            console.log(e.detail.rawData);
        },
        counterEmit(...args) {
            let $event = args[args.length - 1];
            console.log(
                `${this.$name} receive ${$event.name} from ${
                    $event.source.$name
                }`
            );
        }
    };
    async setProfile() {
        try {
            const data = await get(PROFILE);
            console.error(data);
            data.age = getAge(data.birthday);
            this.profile = data;
            this.profile.images &&
                this.profile.images.forEach(item => {
                    if (item.is_avatar) {
                        this.profile.icon = item.image;
                    }
                });
            this.profile.images = this.switchOrder(this.profile.images);
            wepy.setStorageSync('profile', this.profile);
            this.$invoke('my', 'setProfile', this.profile);
        } catch (e) {
            console.error(e);
            if (e == '未完善资料') {
                setTimeout(() => {
                    wepy.redirectTo({ url: 'register?name=reg' });
                }, 1500);
            }
        }
    }
    switchOrder(d) {
        var r = [];
        d.forEach(e => {
            if (e['is_avatar']) r.unshift(e);
            else r.push(e);
        });
        return r;
    }
    events = {
        tabSelect: (...args) => {
            let $event = args[args.length - 1];
            this.selectedTab = $event.source.tabIndex;
            if (this.selectedTab == 2) {
                // this.$invoke('chat', 'initChat');
            }
            if (this.selectedTab == 3) {
                // this.$invoke('my', 'setProfile');
            } else if (this.selectedTab == 1) {
                // this.$invoke('discover', 'initList');
            }
        },
        unreadSet(num) {
            this.$invoke('tabbar', 'unreadSet', num);
        },
        showtab(status) {
            this.tabbarshow = status;
            console.log('44444');
            this.$apply();
        }
    };
    onLoad() {
        //  this.$invoke('chat', 'initChat');
        this.$invoke('discover', 'initList');
        Event.listen('refresh', () => {
            this.$invoke('discover', 'initList', { page: 1 });
        });
    }

    onShow() {
        this.setProfile();
        this.$invoke('chat', 'initChat');
    }
}
</script>
