<!--  -->
<template>
    <view class='container' wx:if="{{loaded}}">
        <view class="battle-container">
            <repeat key="index" for="{{battle.a}}">
                <view animation="{{item.animation}}" style="z-index:{{battle.a.length - index}};" class="battle-box top " @tap="fly('top',{{index}},{{item.image_id}})">
                    <image src="{{item.image}}" mode="aspectFill"></image>
                    <view class="info">
                        <view class="name">{{item.nick_name}}</view>
                        <view class="desc">{{item.gender=='male'?'男':'女'}}/{{item.age}}岁/{{item.constellation}}</view>
                        <view class="distance"><text>{{item.distance}}KM</text>{{item.city}}</view>
                    </view>
                </view>
            </repeat>
            <repeat for="{{battle.b}}" key="index">
                <view animation="{{item.animation}}" style="z-index:{{battle.b.length - index}};" class="battle-box bottom " @tap="fly('bottom',{{index}},{{item.image_id}})">
                    <image src="{{item.image}}" mode="aspectFill"></image>
                    <view class="info">
                        <view class="name">{{item.nick_name}}</view>
                        <view class="desc">{{item.gender=='male'?'男':'女'}}/{{item.age}}岁/{{item.constellation}}</view>
                        <view class="distance"><text>{{item.distance}}KM</text>{{item.city}}</view>
                    </view>
                </view>
            </repeat>
        </view>
        <view class="divider">
            <image src="../../images/battle/devider.png" mode="aspectFill"></image>
        </view>
        <view class="heart" wx:if="{{heartShow}}">
            <view class="top-heart {{heartTop?'active':''}}" wx:if="{{heartTop}}">
                <image src="{{topHeart}}" mode="aspectFill"></image>
            </view>
            <view class="bottom-heart {{heartBottom?'active':''}}" wx:if="{{heartBottom}}">
                <image src="{{bottomHeart}}" mode="aspectFill"></image>
            </view>
        </view>
    </view>
    <van-dialog id="van-dialog" />
    <view class="box-layer" wx:if="{{layer}}">
        <view class="pop-box" wx:if="{{pop}}">
            <image class="image" src="../../images/battle/gift.png" mode="aspectFill"></image>
            <view class="text">您获得一份<text class="red">随机奖励</text></view>
            <view class="btn">查看奖励</view>
        </view>
        <view class="gift-box" wx:if="{{gift}}">
            <image class="icon" src="../../images/battle/heart.png" mode="aspectFill"></image>
            <view class="text">喜欢次数 +1</view>
        </view>
    </view>
</template>

<script>
import wepy from 'wepy';
// import { dialog } from '@/utils';
// let prex = 0;
import { BATTLE } from '@/utils/url';
import { get } from '@/utils/request';
import { removeDuplicates } from '@/utils';
let topIndex = 0;
let bottomIndex = 0;
let timeout = 0;
let buttonDisable = false;
export default class Battle extends wepy.component {
    data = {
        layer: false,
        pop: false,
        gift: false,
        loaded: false,
        topLikedImage: '',
        bottomLikedImage: '',
        topLikedUser: '',
        bottomLikedUser: '',
        topHeart: '',
        bottomHeart: '',
        battle: {},
        heartShow: false,
        heartTop: false,
        heartBottom: false,
        likeCount: {
            count: {}
        },
        animationData: {}
    };

    components = {};

    methods = {
        async fly(position, index, imageid, item) {
            if (position == 'bottom') {
                if (topIndex == this.battle.a.length - 1) {
                    await this.getBattle('a');
                    topIndex = 0;
                }
                topIndex++;
                if (this.battle.a[topIndex]) {
                    this.animation.translateX('-150%').step();
                    this.battle.a[topIndex - 1].animation = this.animation.export();
                    this.bottomLikedImage = this.battle.b[index].image_id;
                    this.bottomLikedUser = this.battle.b[index]._id;
                } else {
                    this.animation.translateX('0%').step({ duration: 0 });
                    this.battle.a.forEach(item => {
                        item.animation = this.animation.export();
                    });
                    this.$apply();
                }
            } else {
                if (index == this.battle.b.length - 1) {
                    await this.getBattle('b');
                    bottomIndex = 0;
                }
                bottomIndex++ ;
                if (this.battle.b[bottomIndex]) {
                    this.animation.translateX('-150%').step();
                    this.battle.b[bottomIndex - 1].animation = this.animation.export();
                    this.topLikedImage = this.battle.a[index].image_id;
                    this.topLikedUser = this.battle.a[index]._id;
                } else {
                    this.animation.translateX('0%').step({ duration: 0 });
                    this.battle.b.forEach(item => {
                        item.animation = this.animation.export();
                    });
                    this.$apply();
                }
            }

            let likedImageId =
                position == 'bottom'
                    ? this.bottomLikedImage
                    : this.topLikedImage;
            let likedUserId =
                position == 'bottom' ? this.bottomLikedUser : this.topLikedUser;
            console.error('topIndex:', topIndex);
            this.flyHeart(position, imageid);
            if (this.likeCount.count[likedImageId] == 3) {
                var notLikeImageId = '';
                if (position == 'bottom') {
                    notLikeImageId = this.battle.a[topIndex - 1]._id;
                } else {
                    notLikeImageId = this.battle.b[bottomIndex - 1]._id;
                }

                console.error(likedImageId + '喜欢了3次');
                console.error(imageid + '当前点击图片');
                setTimeout(() => {
                    this.likeCount.count = {};
                    this.setHeart('top', 1);
                    this.setHeart('bottom', 1);
                    wepy.navigateTo({
                        url: `battle/profile?id=${likedUserId}&imageId=${likedImageId}&notLikeImageId=${notLikeImageId}`
                    });
                }, 1000);

                return;
            }
        }
    };
    flyHeart(type) {
        this.heartShow = true;
        var imageid = '';
        if (type == 'bottom') {
            this.heartBottom = true;
            imageid = this.bottomLikedImage;
        } else {
            this.heartTop = true;
            imageid = this.topLikedImage;
        }

        if (!this.likeCount.count[imageid]) this.likeCount.count[imageid] = 0;
        this.likeCount.count[imageid] = this.likeCount.count[imageid] + 1;
        this.setHeart(type, this.likeCount.count[imageid]);
        setTimeout(() => {
            this.heartTop = false;
            this.heartBottom = false;
            this.heartShow = false;
            this.$apply();
        }, 1000);
    }
    delay() {
        return new Promise(function(resolve, reject) {
            setTimeout(resolve.bind(null, 10), 300);
        });
    }
    events = {};

    watch = {};

    computed = {};
    async getBattle(position = '') {
        const result = await get(BATTLE, {
            battle: position
        });
        // var a = JSON.parse(JSON.stringify(this.battle.a));
        // var b = JSON.parse(JSON.stringify(this.battle.b));
        // a.unshift(...result.a);
        // b.unshift(...result.b);
        // this.battle.a = removeDuplicates(a, 'image_id');
        // this.battle.b = removeDuplicates(b, 'image_id');
        this.$apply();
        this.battle = result;
        this.battle.a.forEach(item => {
            item.distance = (item.distance / 1000).toFixed(2);
            item.animation = {};
        });
        this.battle.b.forEach(item => {
            item.distance = (item.distance / 1000).toFixed(2);
            item.animation = {};
        });
        this.$apply();
        console.warn(result);
    }
    async onLoad() {
        this.animation = wx.createAnimation({
            duration: 500,
            timingFunction: 'ease-in'
        });

        await this.getBattle();
        this.loaded = true;
        this.topLikedImage = this.battle.a[this.battle.a.length - 1].image_id;
        this.topLikedUser = this.battle.a[this.battle.a.length - 1]._id;
        this.bottomLikedImage = this.battle.b[
            this.battle.b.length - 1
        ].image_id;
        this.bottomLikedUser = this.battle.b[this.battle.b.length - 1]._id;
        this.$apply();

        // if (!wepy.getStorageSync('isNew')) {
        //     try {
        //         await dialog({
        //             message:
        //                 '您是第一次使用颜狗小程序,需要了解一下颜狗的使用介绍么?',
        //             confirmButtonText: '去看看',
        //             showCancelButton: true,
        //             cancelButtonText: '不用了'
        //         });
        //         console.log('1');
        //     } catch (e) {
        //         console.log(2);
        //     }
        // }

        const { windowWidth } = await wepy.getSystemInfo();
        console.log(windowWidth);
    }
    setHeart(position, index) {
        if (position == 'top') {
            this.topHeart = `../../../images/battle/${index}.png`;
        } else {
            this.bottomHeart = `../../../images/battle/${index}.png`;
        }
        this.$apply();
    }
    onShow() {}
}
</script>

<style lang='less' scoped>
.box-layer {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 9999;
    background: rgba(0, 0, 0, 0.55);
    .pop-box {
        margin: 254rpx auto;
        width: 470rpx;
        height: 509rpx;
        display: flex;
        justify-content: center;
        flex-wrap: wrap;
        background: rgba(255, 255, 255, 1);
        .image {
            width: 290rpx;
            height: 290rpx;
            display: block;
        }
        .text {
            margin-top: 2rpx;
            font-size: 32rpx;
            color: #060706;
            .red {
                color: #df062e;
            }
        }
        .btn {
            width: 392rpx;
            height: 78rpx;
            line-height: 78rpx;
            text-align: center;
            font-weight: 500;
            background: rgba(223, 6, 46, 1);
            color: #fcfcfc;
            font-size: 28rpx;
        }
    }
    .gift-box {
        width: 480rpx;
        height: 195rpx;
        margin: 353rpx auto;
        display: flex;
        justify-content: center;
        align-items: center;
        background: white;
        color: #707070;
    }
    .icon {
        width: 96rpx;
        height: 96rpx;
    }
    .text {
        margin-left: 26rpx;
        font-size: 32rpx;
        font-weight: 400;
        color: rgba(30, 30, 30, 1);
    }
}
.container {
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    box-sizing: border-box;
    width: 100%;
    overflow: hidden;
    .heart {
        display: flex;
        flex-direction: column;
        width: 100%;
        height: 200vh;
        position: absolute;
        z-index: 9999;
        .top-heart,
        .bottom-heart {
            position: absolute;
            left: 50%;
            top: 200rpx;
            transform: translateX(-50%);
            image {
                width: 180rpx;
                height: 180rpx;
            }
        }
        .bottom-heart {
            top: 700rpx;
        }
        .bottom-heart.active,
        .top-heart.active {
            animation: flashHeart 1s ease-in-out 1;
            animation-fill-mode: both;
        }
        @keyframes flashHeart {
            /** 第一种写法**/
            0% {
                opacity: 0;
                transform: translateX(-50%) scale(0.4, 0.4);
            }
            30% {
                opacity: 1;
                transform: translateX(-50%) scale(1, 1);
            }
            70% {
                opacity: 1;
                transform: translateX(-50%) scale(1, 1);
            }
            100% {
                opacity: 0;
                transform: translateX(-50%) scale(0.4, 0.4);
            }
        }
    }
    image {
        width: 100%;
        height: 100%;
    }
    .divider {
        position: absolute;
        top: 44.5%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 693rpx;
        height: 100rpx;
        z-index: 9999;
        image {
            width: 100%;
            height: 100%;
        }
    }
    .battle-container {
        width: 690rpx;
        display: flex;
        flex-direction: column;
        align-items: center;
        position: relative;
        height: 1064rpx;
        .battle-box {
            width: 690rpx;
            height: 532rpx;
            background: rgba(255, 255, 255, 1);
            opacity: 1;
            overflow: hidden;
            margin: 0 auto;
            position: absolute;
            z-index: 999;
            &.active {
                animation: flyAway 0.5s ease-in 1;
                animation-fill-mode: both;
            }
            @keyframes flyAway {
                0% {
                    transform: translateX(0);
                }
                100% {
                    transform: translateX(-150%);
                }
            }
            .info {
                position: absolute;
                left: 18rpx;
                bottom: 40rpx;
                color: white;
                font-size: 22rpx;
                .name {
                    font-size: 48rpx;
                }
                .distance {
                    text {
                        color: #e60011;
                    }
                }
            }
            &.top {
                image {
                    border-radius: 36rpx 36rpx 0rpx 0rpx;
                }
            }
            &.bottom {
                top: 50%;
                image {
                    border-radius: 0rpx 0rpx 36rpx 36rpx;
                }
            }
        }
    }
}
</style>
