<!--  -->
<template>
    <block wx:if="{{!list.length}}">
        <empty></empty>
    </block>
    <view wx:else class='wrapper'>
        <repeat for="{{list}}" key="index" index="index" item="item">
            <van-swipe-cell class="swipe" id="{{item.To_Account}}" async-close data-index="{{index}}" right-width="{{ 70 }}" data-unread="{{item.UnreadMsgCount}}" async-close bind:close="onDelete">
                <view class="chat-box" >
                    <image class="icon" @tap.capture.stop="goProfile({{item.To_Account}})" src="{{item.C2cImage}}" mode="aspectFill"></image>
                    <view class="msg" @tap.capture.stop="onClick({{item.To_Account}},{{item.C2cNick}},{{item.C2cImage}},{{item.C2cNick}})">
                        <view class="name">{{item.C2cNick}}</view>
                        <view class="content">{{item.MsgShow}}</view>
                    </view>
                     <!-- <image class="icon" @tap.capture.stop="goProfile({{item.To_Account}})" slot="left" src="{{item.C2cImage}}" mode="aspectFill"></image>
                    <view class="msg">
                        <view class="name">{{item.C2cNick}}</view>
                        <view class="content">{{item.MsgShow}}</view>
                    </view> -->
                    <view class="right-part">
                        <view class="time">{{item.showTime}}</view>
                        <view class="unread" wx:if="{{item.UnreadMsgCount>0}}">{{item.UnreadMsgCount}}</view>
                    </view>
                </view>
                <view class="delete" slot="right">删除</view>
            </van-swipe-cell>
        </repeat>
    </view>

</template>

<script>
import wepy from 'wepy';
import { formatDateFromSeconds } from '@/utils';
import webimhandler from '@/utils/handler';
import webim from '@/utils/webim.js'; // 腾讯云im包
import empty from '@/components/empty';
import { Event } from '@/utils/event.js';
var unread = 0;
export default class Chatlist extends wepy.component {
    props = {};

    data = {
        list: {},
        initLength: 0
    };

    components = {
        empty
    };
    methods = {
        goProfile(id) {
            if (id === 'administrator') return;
            wx.navigateTo({
                url: 'battle/profile?dentifier=' + id,
                success: (result) => {

                },
                fail: () => {},
                complete: () => {}
            });
        },
        async getChatList(data) {
            console.log('data', data);
            data.forEach(item => {
                item.C2cNick = decodeURIComponent(item.C2cNick);
                item.MsgShow = decodeURIComponent(item.MsgShow);
                item.showTime = formatDateFromSeconds(item.MsgTimeStamp);
                item.time = item.MsgTimeStamp;
                if (item.To_Account == 'administrator') {
                    item.C2cImage = 'https://images.facedog.cn/public/chat/chatIcon.png';
                    item.C2cNick = '颜狗客服';
                }
            });
            this.list = data;
            this.list.sort((x, y) => { return x.To_Account === 'administrator' ? -1 : y.To_Account === 'administrator' ? 1 : 0; });
            this.initLength = data.length;
            this.$apply();
        },

        receivingMsg(sessMap, msg, init) {
            var sess = null;
            unread = 0;
            wx.hideLoading();
            console.warn('msg', msg);
            for (var i in sessMap) {
                sess = sessMap[i];
                console.warn('sess', sess);
                var isnew = true;
                this.list && this.list.forEach(item => {
                    if (item.To_Account == sess.id()) {
                        isnew = false;
                    }
                });
                console.warn('isnew', isnew);
                if (isnew && Object.keys(msg).length !== 0) {
                    console.log('no!!!!!!');
                    webim.getProfilePortrait(
                        {
                            To_Account: [msg.sess.id()],
                            TagList: [
                                'Tag_Profile_IM_Image',
                                'Tag_Profile_IM_Nick'
                            ]
                        },
                        response => {
                            let nick = '';
                            let image = '';
                            response.UserProfileItem[0].ProfileItem.forEach(item => {
                                if (item.Tag == 'Tag_Profile_IM_Nick') {
                                    nick = item.Value;
                                } else {
                                    image = item.Value;
                                }
                            });
                            this.list.unshift({
                                To_Account: msg.sess.id(),
                                UnreadMsgCount: msg.sess.unread(),
                                C2cNick: nick,
                                C2cImage: image,
                                MsgShow: decodeURIComponent(
                                    msg.sess.msgs()[msg.sess.msgs().length - 1]
                                        .elems[0].content.text
                                ),
                                showTime: formatDateFromSeconds(
                                    msg.sess.time()
                                ),
                                time: msg.sess.time()
                            });
                            this.$apply();
                        }
                    );
                } else {
                    this.list && this.list.forEach(item => {
                        if (item.To_Account === 'administrator') {
                            item.C2cImage = 'https://images.facedog.cn/public/chat/chatIcon.png';
                            item.C2cNick = '颜狗客服';
						}
                        if (item.To_Account == sess.id() && msg.fromAccount) {
							item.UnreadMsgCount = sess.unread();
							console.log('init',init);
							console.log( Object.keys(msg).length)
							console.log('item.To_Account',item.To_Account)
							console.log('msg',msg)
                            if (!init && Object.keys(msg).length !== 0 && item.To_Account == msg.fromAccount) {
                                item.MsgShow = decodeURIComponent(
                                msg.elems[0].content.text
                            );
                                item.showTime = formatDateFromSeconds(
                                msg.sess.time()
                            );
                                item.time = msg.sess.time();
                            }
                        }else{
							console.log('22222',sess.msgs());
							if (!init && Object.keys(msg).length !== 0 && item.To_Account == sess.id()) {
                                item.MsgShow = decodeURIComponent(
                                sess.msgs()[sess.msgs().length-1].elems[0].content.text
                            );
                                item.showTime = formatDateFromSeconds(
                                sess.time()
                            );
                                item.time = sess.time();
                            }
						}
					});
                }
                this.list.sort((a, b) => {
                    return b.time - a.time;
                });
                this.list.sort((x, y) => { return x.To_Account == 'administrator' ? -1 : y.To_Account == 'administrator' ? 1 : 0; });
                unread += sess.unread();
                this.$apply();
                console.log('unrenad:', unread);
                console.log('sess.unread()', sess.unread());
				console.log('sess.id', sess.id());
				console.log('sess.msg', sess.msgs());
                console.log('sess.msg', decodeURIComponent(sess.msgs()[0].elems[0].content.text));
            }
            this.$emit('unreadSet', unread);
            this.$apply();
        },
        onClick(id, name, icon, nickname) {
            wx.setStorageSync('chatIcon', icon);
            wx.navigateTo({
                url: `chat/chat?id=${id}&name=${name}&nick=${nickname}`
            });
        },
        onDelete(event) {
            // console.error(event.detail);
            const { position, instance } = event.detail;
            switch (position) {
            case 'left':
            case 'cell':
                instance.close();
                event.preventDefault();
                break;
            case 'right':
                console.log(this);
                instance.close();
                var sessMap = webim.MsgStore.sessMap(); // 获取 sessMap
                var skey = 'C2C' + instance.id; // 拼装 skey
                var selSess = sessMap[skey]; // 获取 Session 的实例
                webim.setAutoRead(selSess, true, false);
                setTimeout(() => {
                    webim.setAutoRead(selSess, false, false);
                }, 2000);
                webimhandler.delChat(instance.id);
                this.list.splice(instance.dataset.index, 1);
                unread = unread - instance.dataset.unread;
                this.$emit('unreadSet', unread);
                this.$apply();
                break;
            }
        }
    };
    events = {};

    watch = {};

    computed = {};

    onLoad() {
        Event.listen('chatDelete', (id) => {
            var sessMap = webim.MsgStore.sessMap(); // 获取 sessMap
            var skey = 'C2C' + id; // 拼装 skey
            var selSess = sessMap[skey]; // 获取 Session 的实例
            webim.setAutoRead(selSess, true, false);
            setTimeout(() => {
                webim.setAutoRead(selSess, false, false);
            }, 2000);
            webimhandler.delChat(id);
            let index = this.findIndex(x => x.To_Account == 'id');
            this.list.splice(index, 1);
            unread = unread - this.list[index].UnreadMsgCount;
            this.$emit('unreadSet', unread);
            this.$apply();
        });
    }

    onShow() {}
}
</script>

<style lang='less' scoped>
.wrapper {
    width: 750rpx;
    margin-top: 32rpx;
    .delete {
        background: red;
        height: 100rpx;
        line-height: 100rpx;
        color: white;
        text-align: center;
        width: 142rpx;
    }
    .chat-box {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 61rpx;
        padding: 0 30rpx;
        .icon {
            width: 100rpx;
            height: 100rpx;
            border-radius: 50%;
        }
        .msg {
            margin-right: auto;
            margin-left: 27rpx;
            width: 450rpx;
            .name {
                font-size: 28rpx;
                font-family: PingFang SC;
                font-weight: 600;
                color: rgba(0, 0, 0, 1);
            }
            .content {
                margin-top: 4rpx;
                font-size: 25rpx;
                font-family: PingFang SC;
                font-weight: 300;
                color: #7e7e7e;
                text-overflow: ellipsis;
                white-space: nowrap;
                overflow: hidden;
            }
        }
        .right-part {
            display: block;
            text-align: right;
            .time {
                font-size: 20rpx;
                font-family: PingFang SC;
                font-weight: 400;
                color: rgba(158, 157, 157, 1);
            }
            .unread {
                margin-top: 17rpx;
                width: 38rpx;
                height: 38rpx;
                background: rgba(237, 72, 87, 1);
                border-radius: 50%;
                float: right;
                line-height: 41rpx;
                text-align: center;
                color: white;
                font-size: 20rpx;
            }
        }
    }
}
</style>
