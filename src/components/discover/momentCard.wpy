<!--  -->
<template>
    <repeat for="{{momentList}}" key="index" index="index" item="item">
        <view class="momentCard">
            <image  class="header" src="{{item.avatar}}" mode="aspectFill" @tap="toProfile({{item.user_id}})"></image>
            <view class="content">
                <view class="info">
                    <view class="first">
                        <view class="name">{{item.nickname || item.nick_name}}</view>
                        <view class="other">
                            <text class="location">距您 {{item.distance}}km</text>
                            <text class="online-time">{{item.juli}}</text>
                        </view>
                    </view>
                    <view class="second">
                        <text class="margin-right">{{item.age}}岁</text>
                        <text class="margin-right">巨蟹座</text>
                        <text class="margin-right">{{item.city}}</text>
                    </view>
                    <view class="moment" @tap="toMomentDetail({{item._id}})">
                        {{item.content}}
                    </view>
                    <view class="imgs">
                        <repeat for="{{item.images}}" key="indeximages" index="indeximages" item="pic">
                            <image class="img" src="{{pic.image_url}}" data-index="{{index}}" data-picIndex="{{indeximages}}"  @tap="preview" mode="aspectFill"></image>
                        </repeat>
                    </view>
                    <view class="actions">
                        <view class="box" @tap="zan" data-id="{{item._id}}"
                        data-index="{{index}}" data-liked="{{item.liked}}">
                            <image class="icon" src="../../images/discover/discover-zaned.png" wx:if="{{item.liked}}"></image>
                            <image class="icon" src="../../images/discover/discover-zan.png" wx:else></image>
                            <view wx:if="{{item.liked}}" class="text red">{{item.likes.length || 0}}</view>
                            <view wx:else class="text">{{item.likes.length || 0}}</view>
                        </view>
                        <view class="box" @tap="comment" data-id="{{item._id}}"
                        data-index="{{index}}" data-userid="{{item.user_id}}">
                            <image class="icon" src="../../images/discover/discover-commen.png"></image>
                            <view class="text">私密评论</view>
                        </view>
                        <view class="last">
                            <view class="lastbox" @tap="warn" data-id="1023">
                                <image class="action-icon" src="../../images/discover/discover-actions.png"></image>
                            </view>
                        </view>
                    </view>
                </view>
                <view class="comment-box">
                    <view class="comment-who" wx:if="{{item.likes.length}}">
                        <image class="icon" src="../../images/discover/discover-zan.png"></image>
                        <repeat for="{{item.likes}}" key="indexlikes" index="indexlikes" item="pic">
                            <image class="img" src="{{pic.avatar}}" data-id="{{pic.user_id}}" mode="aspectFill" wx:if="{{pic.avatar}}" @tap="toProfile({{pic.user_id}})"></image>
                        </repeat>
                    </view>
                    <view class="comment-info-box" wx:if="{{item.comments.length}}">
                        <repeat for="{{item.comments}}" key="indexcomments" index="indexcomments" item="comments">
                            <view class="comment-info" @tap="handleCommentAction" data-index="{{index}}" data-commentindex="{{indexcomments}}">
                                <view class="from">{{comments.user_nick_name}}</view>
                                <view class="reply" wx:if="{{comments.replay_user_nick_name}}">回复</view>
                                <view class="to" wx:if="{{comments.replay_user_nick_name}}">{{comments.replay_user_nick_name}}</view>
                                <view>:</view>
                                {{comments.content}}
                            </view>
                        </repeat>
                    </view>
                </view>
            </view>
        </view>
    </repeat>
    <view class="moment-mask" wx:if="{{isShowComment}}" @tap="closeComment">
        <view class="inputbox">
            <input placeholder="发送私密评论，只有她能看到哦~" focus="{{isShowComment}}" class="inputview"
            confirm-type="send" bindblur="closeComment"
            bindconfirm="sendComment"
            data-componentId="{{componentId}}"
            data-componentIndex="{{componentIndex}}"
            data-commentUser="{{commentUser}}"/>
        </view>
    </view>
    <van-popup    
    class="warn-pop"
    show="{{ showDelete }}"
    position="bottom"
    close-on-click-overlay="{{ true }}"
    >
    <view class="warn" @tap="deleteComment">删除</view>
    <view class="warn" @tap="cancaleComment">取消</view>
    </van-popup>
</template>
<script>
import wepy from 'wepy';
import { get, post, del } from '../../utils/request';
import { formatDateFromSeconds } from '../../utils/index';

export default class momentCard extends wepy.component {
    data = {
        momentList: [],
        isShowComment: false,
        componentId: '', // 回复的动态id
        componentIndex: '', // 列表中的index
        commentUser: '', // 该动态的发布人id
        showDelete: false,
        actionCommentIndex: '', // 删除的评论index
        actionItemIndex: '', // 删除评论的动态index
    };
    components = {};

    methods = {
        warn(e) {
            const { id } = e.currentTarget.dataset;
            this.$emit('showwarn', id);
        },
        // 点击图片预览
        preview(e) {
            const { index, picindex } = e.currentTarget.dataset; 
            const urls = this.momentList.reduce((res, item, i) => {
                if (+index === +i) {
                    res = item.images.map(x => x.image_url);
                }
                return res;
            }, []);
            const current = urls[picindex];
            console.log(urls, current);
            wepy.previewImage({
                current, // 当前显示图片的http链接
                urls, // 需要预览的图片http链接列表
            });
        },
        // 处理接口的年龄字段
        handleAge(birthday) {
            const arr = birthday.split('-');
            const time = new Date;
            const cur_year = time.getFullYear();
            const cur_month = time.getMonth();
            const cur_day = time.getDate();
            const baseAge = +cur_year - +arr[0] - 1;
            console.log(baseAge);
            if (+arr[1] > cur_month) {
                return baseAge;
            } else if (+arr[1] < cur_month) {
                return baseAge + 1;
            } else {
                if (+arr[2] > cur_day) {
                    return baseAge;
                } else {
                    return baseAge + 1;
                }
            }
        },
        // 点赞
        async zan(e) {
            const { id, index } = e.currentTarget.dataset; 
            const me = wepy.getStorageSync('profile');
            if (this.momentList[index].liked) { // 取消点赞
                await get(`/api/discover/moment/${id}/unlike`);
                this.momentList[index].likes = this.momentList[index].likes.filter(x => x.user_id !== me._id);
                this.momentList[index].liked = false;
            } else { // 点赞
                const data =  await get(`/api/discover/moment/${id}/like`);
                // this.momentList[index].likes.length += 1;
                this.momentList[index].likes.push({
                    avatar: me.icon,
                    user_id: me._id,
                });
                this.momentList[index].liked = true;
            }
            this.$apply();
        },
        // 私密评论
        comment(e) {
            this.isShowComment = true;
            const { id, index, userid } = e.currentTarget.dataset; 
            this.componentId = id; // 动态id
            this.componentIndex = index;
            this.commentUser = userid;
        },
        // 关闭评论
        closeComment() {
            this.isShowComment = false;
        },
        // 发送评论
        async sendComment(e) {
            const { value } = e.detail; 
            const data = await post(`/api/discover/comment/${this.componentId}`, {
                moment_id: this.componentId,
                content: value,
            });
            const me = wepy.getStorageSync('profile');
            this.momentList[this.componentIndex].comments.push({
                _id: data,
                user_nick_name: me.nick_name,
                user_id: me._id,
                replay_user_id: '',
                replay_user_nick_name: '',
                content: value,
            });
            this.$apply();
            console.log(data);
        },
        // 跳转到他的资料页面
        toProfile(id) {
            wepy.navigateTo({
                url: `battle/profile?id=${id}`,
            });
        },
        // 跳转到动态详情页面
        toMomentDetail(id) {
            wepy.navigateTo({
                url: `/pages/ta/momentDetail?momentId=${id}`,
            });
        },
        // 点击某一条评论
        handleCommentAction(e) {
            const { index, commentindex } = e.currentTarget.dataset; 
            const comment = this.momentList[index].comments[commentindex];
            console.log('点击某一个评论', comment);
            const me = wepy.getStorageSync('profile');
            const ownerId = me._id;
            if (ownerId == comment.user_id) {
                this.actionCommentIndex = commentindex;
                this.actionItemIndex = index;
                this.showDelete = true;
                console.log('点击某一个评论', '应该是删除评论');
            } else {
                console.log('点击某一个评论', '应该是回复评论');
            }
        },
        // 确认删除评论
        async deleteComment() {
            const comment = this.momentList[this.actionItemIndex].comments[this.actionCommentIndex];
            await del(`/api/discover/comment`, comment._id);
        },
        // 取消删除弹窗
        cancaleComment() {
            this.showDelete = false;
        },
    };
    setMomentList(list) {
        console.log(list);
        this.momentList = list.reduce((res, item) => {
            // 处理距离
            item.distance = (item.distance / 1000).toFixed(2);
            if (item.birthday) {
                item.age = this.methods.handleAge(item.birthday);
            }
            item.juli = formatDateFromSeconds(item.create_time);
            res.push(item);
            return res;
        }, []);
        this.$apply();
    };
    events = {};

    watch = {};

    computed = {};

    onLoad() { };

    onShow() { };
}
</script>

<style lang='less' scoped>
.moment-mask{
    position: fixed;
    width: 100vw;
    height: 100vh;
    background: rgba(0,0,0,.7);
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    z-index: 1000;
    .inputbox{
        position: absolute;
        bottom: 15vh;
        height: 147rpx;
        width: 100%;
        background: white;
        .inputview{
            width: 92%;
            margin: 32rpx auto;
            background:rgba(230,229,232,1);
            height: 82rpx;
            line-height: 82rpx;
            font-size:24rpx;
            color:rgba(158,157,157,1);
            padding-left: 22rpx;
        }
    }
}
.momentCard{
    display: flex;
    padding: 0 26rpx;
    margin-top: 47rpx;
    .header{
        width: 100rpx;
        height: 100rpx;
        border-radius: 100%;
        display: block;
        margin-right: 16rpx;
    }
    .content{
        flex: 1;
        .info{
            .first{
                display: flex;
                justify-content: space-between;
                width: 100%;
                line-height: 55rpx;
                .name{
                    font-size:32rpx;
                    font-weight:600;
                    color:rgba(0,0,0,1);
                }
                .other{
                    font-size:20rpx;
                    font-weight:400;
                    color:rgba(158,157,157,1);
                    .location{
                        margin-right: 18rpx;
                    }
                }
            }
            .second{
                font-size:20rpx;
                font-weight:400;
                line-height:28rpx;
                color:rgba(158,157,157,1);
                .margin-right{
                    margin-right: 20rpx;
                }
            }
            .moment{
                margin-top: 40rpx;
                font-size:24rpx;
                line-height:36rpx;
                color:rgba(0,0,0,1);
            }
            .imgs{
                display: flex;
                flex-wrap: wrap;
                align-content: flex-start;
                margin-top: 30rpx;
                .img{
                    width: 182rpx;
                    height: 182rpx;
                    margin: 10rpx 10rpx 0 0;
                }
            }
            .actions{
                display: flex;
                margin-top: 30rpx;
                font-size: 0;
                .box{
                    background:rgba(245,245,245,1);
                    padding: 0 20rpx;
                    margin-right: 40rpx;
                    height: 45rpx;
                    .icon{
                        width: 24rpx;
                        height: 22rpx;
                    }
                    .text{
                        font-size:24rpx;
                        height: 45rpx;
                        line-height: 45rpx;
                        color:rgba(158,157,157,1);
                        display: inline-block;
                        margin-left: 5rpx;
                    }
                    .red{
                        color: #E60011;
                    }
                }
                .last{
                    flex: 1;
                    text-align: right;
                    display: flex;
                    flex-direction: column;
                    .lastbox{
                        width: 66rpx;
                        height: 45rpx;
                        align-self: flex-end;
                        .action-icon{
                            width: 37rpx;
                            height: 9rpx;
                            margin: 18rpx 0;
                        }
                    }
                }
            }
        }
    }
    .comment-box{
        background:rgba(245,245,245,1);
        margin-top: 30rpx;
        .comment-who{
            display: flex;
            flex-wrap: wrap;
            border-bottom: 1px solid rgba(212,212,213,1);
            padding-bottom: 23rpx;
            .icon{
                width: 24rpx;
                height: 21rpx;
                margin: 44rpx 11rpx 21rpx 30rpx;
            }
            .img{
                width: 60rpx;
                height: 60rpx;
                border-radius: 100%;
                margin: 23rpx 10rpx 0 10rpx;
            }
        }
        .comment-info-box{
            padding: 19rpx 0;
            .comment-info{
                margin: 5rpx 30rpx;
                font-size:24rpx;
                view{
                    display: inline-block;
                }
                .from, .to{
                    color:rgba(230,0,17,1);
                    font-weight: 600;
                }
                .reply{
                    margin: 0 5rpx;
                }
            }
        }
    }
}
</style>
